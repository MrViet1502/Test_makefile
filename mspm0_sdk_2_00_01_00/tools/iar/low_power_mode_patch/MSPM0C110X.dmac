//*****************************************************************************
//
// Copyright (C) 2013 - 2017 Texas Instruments Incorporated - http://www.ti.com/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//  Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in the
//  documentation and/or other materials provided with the
//  distribution.
//
//  Neither the name of Texas Instruments Incorporated nor the names of
//  its contributors may be used to endorse or promote products derived
//  from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// IAR macro definitions for MSPM0C110X processor
//
//****************************************************************************

__var gd_DeviceID;
__var gd_ManufacturerID;
__var gd_DeviceRev;

isMSPM0C110X()
{
  __var result;
  result = 0;
  if (
      (gd_DeviceID == 0xBBA1) &&
      (gd_ManufacturerID == 0x17)
     )
  {
    result = -1;
  }
  return result;
}

_ExecDeviceFlashReset()
{

}

_ExecDeviceReset()
{
}

_ExecDeviceFlashInit()
{
/*
    __var loadStatus;

    gd_DeviceRev = __readMemory32(0x41C40004, "Memory") >> 28;
    gd_DeviceID   = (__readMemory32(0x41C40004, "Memory") >> 12) & 0x0FFFF;
    gd_ManufacturerID = (__readMemory32(0x41C40004, "Memory") >> 1) & 0x7FF ;

    __message "Checking device id...";
    if ( __driverType("xds") || __driverType("ijet") ||
       __driverType("cmsisdap")
        )
    {
        if (!isMSPM0C110X())
        {
             if (!(__messageBoxYesNo("The connected device is not MSPM0C110X, do you want to proceed?", "Invalid ID")))
             {
                __abortLaunch("The device connected is not MSPM0C110X !");
             }
        }
        else
        {
            __message "Device ID OK";
        }
    }
*/
}

_ExecDeviceFlashExit()
{
}

//Check that ahb is enabled to see if unlock sequence is necessary.
AhbApEnabled()
{
    __var ahbapen;
    if(__driverType("xds"))
    {
      ahbapen = ((__readMemory32(0x00, "AP0_Register") >> 6) & 1);// Read AHB:CSW and get the DBGEN bit
    }else if(__driverType("ijet"))
    {
      ahbapen = (( __probeCmd("dap.APr 0x00", 0) >> 6) & 1);// Read AHB:CSW and get the DBGEN bit
    }
    return ahbapen;
}

_ExecDeviceExit()
{
    if (__driverType("xds"))
    {
      _RestoreForceActive();
    }
}

_InhibitSleepForceActive()
{
    __var REG_SPREC;
    __var REG_DPREC;
    __var SPREC_DBGCON_BITS;
    SPREC_DBGCON_BITS = (0x9 << 16);  // DEBUGPOWER | HaltOnReset
    __var SPREC_DBGCON_WE_BIT;
    SPREC_DBGCON_WE_BIT = (1 << 20);  // INHIBITSLEEP

    // Set DEBUGPOWER, HaltOnReset and INHIBITSLEEP
    __writeMemory32(SPREC_DBGCON_BITS | SPREC_DBGCON_WE_BIT, 0x00000000, "AP4_Register");

    REG_DPREC = __readMemory32(0x00000000, "AP4_Register");

    // Force clock power (set FORCEACTIVE bit )
    __writeMemory32(REG_DPREC | (1 << 3), 0x00000000, "AP4_Register");
    REG_DPREC = __readMemory32(0x00000000, "AP4_Register");

    __message "DMAC: DEBUGPOWER, INHIBITSLEEP and HaltOnReset bits are set.";
    __message "DMAC: FORCEACTIVE bit are set.";
}

_RestoreForceActive()
{
    __var REG_DPREC;

    REG_DPREC = __readMemory32(0x00000000, "AP4_Register");

    REG_DPREC = REG_DPREC & ~(1 << 3);

    // Release clock power (clear FORCEACTIVE bit)
    __writeMemory32(REG_DPREC, 0x00000000, "AP4_Register");
    REG_DPREC = __readMemory32(0x00000000, "AP4_Register");

    __message "DMAC: FORCEACTIVE bit are cleared.";
}

_ExecDeviceCoreConnect()
{
  __message "_ExecDeviceCoreConnect()";

    if ( __driverType("xds") || __driverType("ijet") ||
        __driverType("cmsisdap") ||
        __driverType("sim")
        )
    {
        __message "Checking security status...";
    }


    if ( __driverType("xds"))
    {
      _InhibitSleepForceActive();
    }

/*
  __var executeCmd;
  if (!AhbApEnabled())
  {
    executeCmd = __messageBoxYesCancel("Debug is not available. Factory Reset the device?", "DSSM Factory Reset");

    if (executeCmd)
    {
      _DSSM_SendCmd(0x20a);
    }
  }
*/

  return;

}

_ExecDeviceSetup()
{
}
